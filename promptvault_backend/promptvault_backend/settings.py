"""
Django settings for promptvault_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

import dj_database_url


DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv("DATABASE_URL"),
        conn_max_age=600  # Optional: improve performance
    )
}
# DATABASE_URL = "postgresql://naresh:dm3Xc9lvM8KoFKRaOCBDYyAsfMuF9260@dpg-d0rm57re5dus73ahj8fg-a.oregon-postgres.render.com/promptsdatabase"

# DATABASES = {
#     'default': dj_database_url.config(
#         default=DATABASE_URL,
#         conn_max_age=600  # Optional: improve performance
#     )
# }



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-nj#tu=oyks)43l7!ejk*^c55^+=gxo72ni)8sl=ga_7+to(*k6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',

    'django.contrib.sites',  # Required by allauth
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Specific provider (Google)
    'allauth.socialaccount.providers.google',

    'rest_framework',  # Add this
    'api.apps.ApiConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# DOMAIN = 'promptvault.onrender.com'  
# FRONTEND_URL = 'https://promptvault2.vercel.app'
FRONTEND_URL = 'http://localhost:5173'

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'http://127.0.0.1:8000',
    FRONTEND_URL,
]

CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_DOMAIN = None

CSRF_COOKIE_NAME = 'csrftoken'
CSRF_HEADER_NAME = 'X-CSRFToken'
CSRF_USE_SESSIONS = False

# Add CORS specific settings


# Update REST_FRAMEWORK settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}


SITE_ID = 3     # added 
ROOT_URLCONF = 'promptvault_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'promptvault_backend.wsgi.application'
# ---------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Django Allauth specific settings
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # No username field
ACCOUNT_EMAIL_VERIFICATION = 'none'     # Or 'optional' or 'mandatory'. 'none' for simplicity now.
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_GET = True # Allows logout via a simple GET request (can be a security consideration, but simpler for now)

# Social Account Specific Settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the client_id and secret
        # or list them here:
        # 'APP': {
        #     # These will be filled in Step 5 from Google Cloud Console
        #     'client_id': '97595163668-uubmnab9omr7ref9cu0odosufp7vlapk.apps.googleusercontent.com',
        #     'secret': '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',
        #     'key': '' # Not typically needed for Google
        # },
        'SCOPE': [  # What information you want from Google
            'profile',
            'email',  
        ],
        'AUTH_PARAMS': { # Additional authentication parameters
            'access_type': 'online',
        }
    }
}


# DOMAIN = 'promptvault.onrender.com'

# FRONTEND_URL = 'http://localhost:5173/'
# Redirect URLs (important for SPA like React)
LOGIN_REDIRECT_URL = f"{FRONTEND_URL}/"  # Where to redirect after login (Django's perspective)
LOGOUT_REDIRECT_URL = f"{FRONTEND_URL}/"# Where to redirect after logout (Django's perspective)
# For SPA, you'll often handle redirects on the frontend after getting a token.
# We'll adjust this later if needed when integrating with React.


# -------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# settings.py

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres',           # e.g. aptitude_db
#         'USER': 'postgres',           # e.g. postgres
#         'PASSWORD': '1243',   # e.g. your password
#         'HOST': 'localhost',              # or the actual DB host
#         'PORT': '5432',                   # default PostgreSQL port
#     }
# }


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'promptsdatabase',
#         'USER': 'naresh',
#         'PASSWORD': 'dpg-d0rm57re5dus73ahj8fg-a',  # From environment variable
#         'HOST': 'dpg-d0rm57re5dus73ahj8fg-a',
#         'PORT': '5432',
#         'OPTIONS': {'sslmode': 'require'},
#     }
# }


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

import sys

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}



CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_DOMAIN = None

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173'
]

# CSRF settings
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_DOMAIN = None
CSRF_HEADER_NAME = 'X-CSRFToken'

# Session settings
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_DOMAIN = None

# Trusted origins
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173'
]


CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_DOMAIN = None
CORS_ALLOW_ALL_ORIGINS = True